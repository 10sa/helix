[SERVER] bool PlayerCanUseItem(client, entity)
	Allows a player to use an item entity or not.

[SERVER] int PlayerGetFistDamage(client, damage)
	Return to change the damage of fists.

[SERVER] bool PlayerCanKnock(client, entity)
	Return to allow or disallow a knock on the given entity.

[CLIENT] nil DrawLoadingScreen()
	Call to draw something when the NutScript loading screen is shown.

[CLIENT] bool ShouldDrawTargetEntity(entity)
	Whether or not to draw target ID stuff for a specific entity.
	Used for drawing door information, item information, etc.

[CLIENT] bool PlayerCanSeeBusiness()
	Whether or not the local player can see the business menu.

[SHARED] nil CreateCharVars(character)
	Called when networked variables for characters should be defined.
	This is so a default value is given and what type of variable the value is.

[SERVER] nil GetDefaultInv(inventory, client, data)
	Modifies what the default inventory is. The inventory table passed contains
	the function: inventory:Add(uniqueID, quantity [def 1], data [def {}]) which
	is similar to client:UpdateInventory(). Data is a table that contains all of
	the character variables.

[SERVER] int GetDefaultMoney(client, data)
	Determines how much money a character starts with. It also passes the character
	data like GetDefaultInv.

[SERVER] nil PlayerLoadedChar(client)
	Called after the client has loaded a character.

[SERVER] int PlayerGetDeathTime(client, time)
	The value returned will determine how long a player has to wait before respawning.

[CLIENT] nil BusinessPrePopulateItems(panel)
	Called before the item icons are created for the business panel. The actual business
	panel is also passed.

[CLIENT] nil BusinessCategoryCreated(category)
	Called after a category for an item has been created. The same category is also passed.

[CLIENT] nil BusinessItemCreated(itemTable, icon)
	Called after an icon for an item has been created. Both the item table and icon are
	passed.

[CLIENT] nil BusinessPostPopulateItems(panel)
	Called after all the categories and icons are created in the business menu. This
	hook also has the business panel passed.

[SERVER] nil PlayerThrowPunch(client, attempted)
	Called after the player has thrown a punch. The attempted is true if there was an
	entity in the punch path, but does not guarantee that the entity took damage.